<?xml version="1.0"?>
<project name="core-diary" default="default" basedir=".">

    <description>
        This build file compiles, tests, packages and
        distributes the core library of the diary application.
    </description>

    <property file="build.properties"/>

    <property name="src.dir" location="src"/>
    <property name="lib.dir" location="lib"/>

    <property name="build.dir" location="build"/>
    <property name="build.classes.dir" location="${build.dir}/classes"/>
    <property name="build.test.dir" location="${build.dir}/test"/>

    <property name="test.src.dir" location="test"/>
    <property name="test.classes.dir" location="${build.test.dir}/classes"/>
    <property name="test.data.dir" location="${build.test.dir}/data"/>
    <property name="test.reports.dir" location="${build.test.dir}/reports"/>

    <!-- set up distribution targets -->
    <property name="dist.dir" location="dist"/>
    <property name="dist.doc.dir" location="${dist.dir}/doc"/>

    <property name="javadoc.dir" location="${dist.dir}/api"/>


    <property name="project.name" value="diary-core"/>
    <property name="project.version" value="0.1alpha"/>
    <property name="project.name-ver" value="${project.name}-${project.version}"/>

    <property name="main.class" value="d1.core.DiaryMain"/>
    <property name="target.name" value="${project.name-ver}.jar"/>
    <property name="target.jar" location="${dist.dir}/${target.name}"/>

    <property name="build.debug" value="true"/>

    <!-- what is our fork policy for junit -->
    <property name="junit.fork" value="true"/>
    <property name="junit.forkmode" value="once"/>
    <property name="test.suite" value="d1.core.test.LessSimpleTest"/>

    <property name="target.zip" location="${dist.dir}/${project.name-ver}.zip"/>
    <property name="src.zip" location="${dist.dir}/${project.name-ver}-src.zip"/>

    <property name="target.tar" location="${dist.dir}/${project.name-ver}.tar"/>
    <property name="target.tar.gz" location="${target.tar}.gz"/>
    <property name="target.tar.bz2" location="${target.tar}.bz2"/>


    <!-- pattern of source files to copy -->
    <property name="source.files.tocopy" value="**/*.properties,**/*.dtd,**/*.xml,**/*.xsd,**/*.jpg"/>
    <property name="bin.dir" location="bin"/>
    <property name="unix.scripts" value="**/*.sh,**/*.pl,**/*.py"/>
    <property name="dos.scripts" value="**/*.bat,**/*.cmd"/>

    <property name="unzip.dir" location="${build.dir}/unzip"/>
    <property name="unzip.bin.dir" location="${unzip.dir}/bin"/>
    <property name="unzip.src.dir" location="${unzip.dir}/src"/>
    <property name="untar.dir" location="${build.dir}/untar"/>
    <property name="unjar.dir" location="${build.dir}/unjar"/>

    <tstamp>
        <format property="timestamp.isoformat" pattern="yyyy-MM-dd'T'HH:mm:ss" locale="en"/>
    </tstamp>

    <path id="compile.classpath">
        <fileset dir="${lib.dir}">
            <include name="*.jar"/>
        </fileset>
    </path>

    <path id="test.compile.classpath">
        <path refid="compile.classpath"/>
        <pathelement location="${build.classes.dir}"/>
    </path>

    <path id="test.classpath">
        <path refid="test.compile.classpath"/>
        <pathelement location="${test.classes.dir}"/>
    </path>

    <path id="test.forking.classpath">
        <path refid="test.classpath"/>
        <pathelement path="${java.class.path}"/>
    </path>

    <patternset id="failing.tests">
        <exclude unless="run.failing.tests" name="d1/core/test/JavaAssertTest.*"/>
    </patternset>

    <fileset id="ftp.upload.fileset" dir="${dist.dir}">
        <include name="*.zip"/>
        <include name="*.zip.sha1"/>
        <include name="*.tar.gz"/>
        <include name="*.tar.gz.sha1"/>
    </fileset>

    <target name="echo-value">
        <echo message="value = ${java.class.path}"/>
    </target>

    <!--<target name="default" depends="dist" description="package everything and checksum it"/>-->

    <!--<target name="dist" depends="package-everything,checksum"-->
    <!--description="create the distributables"/>-->

    <target name="init">
        <mkdir dir="${build.classes.dir}"/>
        <mkdir dir="${dist.doc.dir}"/>
        <mkdir dir="${javadoc.dir}"/>
    </target>

    <target name="compile" depends="init">
        <condition property="build.debuglevel"
                   value="lines,source"
                   else="lines,vars,source">
            <isset property="release.build"/>
        </condition>
        <echo level="verbose">debug level=${build.debuglevel}</echo>
        <javac destdir="${build.classes.dir}"
               debug="true"
               debuglevel="${build.debuglevel}"
               includeAntRuntime="false"
               srcdir="${src.dir}">
            <classpath refid="compile.classpath"/>
            <include name="**/*.java"/>
        </javac>
        <copy todir="${build.classes.dir}">
            <fileset dir="${src.dir}" includes="${source.files.tocopy}"/>
        </copy>
    </target>

    <target name="test-init">
        <mkdir dir="${test.classes.dir}"/>
        <delete dir="${test.data.dir}"/>
        <delete dir="${test.reports.dir}"/>
        <mkdir dir="${test.data.dir}"/>
        <mkdir dir="${test.reports.dir}"/>
    </target>

    <target name="test-compile" depends="compile,test-init">
        <javac srcdir="${test.src.dir}"
               destdir="${test.classes.dir}"
               debug="true"
               debuglevel="lines,vars,source"
               includeAntRuntime="true">
            <classpath refid="test.compile.classpath"/>
        </javac>
    </target>


    <target name="test-one-class" depends="test-compile">
        <junit printsummary="false" haltonfailure="true">
            <classpath refid="test.classpath"/>
            <formatter type="brief" usefile="false"/>
            <test name="${test.suite}"/>
        </junit>
        <copy todir="${test.classes.dir}">
            <fileset dir="${test.src.dir}" includes="${source.files.tocopy}"/>
        </copy>
    </target>

    <target name="test-multi-classes" depends="test-compile">
        <junit printsummary="false" haltonfailure="false">
            <classpath refid="test.classpath"/>
            <formatter type="brief" usefile="false"/>
            <formatter type="xml"/>
            <batchtest todir="${test.data.dir}">
                <fileset dir="${test.classes.dir}" includes="**/test/*Test.class"/>
            </batchtest>
        </junit>
        <junitreport todir="${test.data.dir}">
            <fileset dir="${test.data.dir}">
                <include name="TEST-*.xml"/>
            </fileset>
            <report format="frames" todir="${test.reports.dir}"/>
        </junitreport>
    </target>

    <target name="test-reporting" depends="test-compile">
        <junit printsummary="false"
               errorProperty="test.failed"
               failureProperty="test.failed" fork="true">
            <classpath>
                <path refid="test.classpath"/>
            </classpath>
            <formatter type="brief" usefile="false"/>
            <formatter type="xml"/>
            <batchtest todir="${test.data.dir}">
                <fileset dir="${test.classes.dir}"
                         includes="**/test/*Test.class"/>
            </batchtest>
        </junit>
        <junitreport todir="${test.data.dir}">
            <fileset dir="${test.data.dir}">
                <include name="TEST-*.xml"/>
            </fileset>
            <report format="frames"
                    todir="${test.reports.dir}"/>
        </junitreport>
        <!-- Conditional fail task triggered when the property is set-->
        <fail if="test.failed">
            Tests failed. Check ${test.reports.dir}
        </fail>
    </target>


    <target name="jar" depends="compile" description="create the JAR file">
        <property name="manifest.mf" location="${build.dir}/manifest.mf"/>
        <manifest file="${manifest.mf}">
            <attribute name="Built-By" value="${user.name}"/>
            <attribute name="Sealed" value="true"/>
            <attribute name="Built-On" value="${timestamp.isoformat}"/>
            <attribute name="Main-Class" value="${main.class}"/>
        </manifest>
        <jar destfile="${target.jar}"
             manifest="${manifest.mf}"
             duplicate="preserve"
             compress="false">
            <fileset dir="${build.classes.dir}"/>
        </jar>
    </target>

    <target name="unjar" depends="init">
        <unjar src="${target.jar}" dest="${unjar.dir}">
        </unjar>
    </target>

    <target name="dist-with-manifest" depends="compile" description="make the distribution">
        <jar destfile="${target.jar}"
             duplicate="preserve"
             index="true"
             manifest="src/META-INF/MANIFEST.MF">
            <fileset dir="${build.classes.dir}"/>
        </jar>
    </target>

    <target name="jar-dynamic-manifest" depends="compile">
        <property name="manifest.mf" location="${build.dir}/manifest.mf"/>
        <property name="main.class" value="d1.core.DiaryMain"/>


        <manifest file="${manifest.mf}">
            <attribute name="Built-By" value="${user.name}"/>
            <attribute name="Sealed" value="true"/>
            <attribute name="Built-On" value="${timestamp.isoformat}"/>
            <attribute name="Main-Class" value="${main.class}"/>
        </manifest>

        <jar destfile="${target.jar}" duplicate="preserve" manifest="${manifest.mf}">
            <fileset dir="${build.classes.dir}"/>
        </jar>
    </target>


    <target name="javadocs" depends="compile" description="make the java docs">
        <javadoc
                access="private"
                sourcepath="${src.dir}"
                destdir="${javadoc.dir}"
                packagenames="d1.*"
                use="true"
                version="true"
                windowtitle="${ant.project.name}"
                failonerror="true">
            <classpath refid="compile.classpath"/>
        </javadoc>
    </target>

    <target name="fix-docs" depends="javadocs">
        <property name="readme.windows.file" location="${dist.doc.dir}/readme.txt"/>
        <property name="readme.unix.file" location="${dist.doc.dir}/README"/>
        <copy file="${readme.windows.file}" tofile="${readme.unix.file}"/>
        <fixcrlf eol="crlf" file="${readme.windows.file}" tab="remove" tablength="4"/>
        <fixcrlf eol="lf" file="${readme.unix.file}" tab="remove" tablength="2"/>
    </target>

    <target name="clean" description="Deletes files generated by the build.">
        <delete dir="${build.dir}"/>
        <delete dir="${dist.dir}"/>
    </target>

    <target name="execute" depends="compile">
        <java classname="com.example.ant.Main" classpath="build/classes">
            <arg value="a"/>
            <arg value="b"/>
            <arg file="."/>
        </java>
    </target>


    <target name="init-security">
        <property name="keystore.dir" location="${user.home}/.secret"/>
        <mkdir dir="${keystore.dir}"/>
        <chmod file="${keystore.dir}" perm="700"/>
        <property name="keystore" location="${keystore.dir}/local.keystore"/>
        <property file="${keystore.dir}/keystore.properties"/>
        <property name="keystore.alias" value="code.signer"/>
    </target>


    <target name="get-password" depends="init-security">
        <input addproperty="keystore.password">password for keystore:</input>
        <echo level="verbose">password = ${keystore.password}</echo>
    </target>

    <target name="create-signing-key" depends="get-password">
        <genkey alias="${keystore.alias}"
                keystore="${keystore}"
                storepass="${keystore.password}"
                validity="366"
                dname="CN=Ant Group, OU=Jakarta Division, O=Apache.org, C=US"/>
    </target>

    <target name="sign-jar" depends="jar,get-password">
        <signjar jar="${target.jar}"
                 alias="${keystore.alias}"
                 keystore="${keystore}"
                 storepass="${keystore.password}"/>
    </target>

    <path id="test.jar.classpath">
        <path refid="compile.classpath"/>
        <pathelement location="${target.jar}"/>
        <pathelement location="${test.classes.dir}"/>
    </path>

    <target name="test-jar" depends="test-compile,sign-jar">
        <junit printsummary="false" haltonfailure="false">
            <classpath refid="test.jar.classpath"/>
            <formatter type="brief" usefile="false"/>
            <batchtest todir="${test.data.dir}">
                <fileset dir="${test.classes.dir}"
                         includes="**/test/*Test.class"/>
            </batchtest>
        </junit>
    </target>

    <target name="create-bin-zipfile"
            depends="sign-jar,fix-docs"
            description="create the distributable for Windows">
        <zip destFile="${target.zip}" duplicate="preserve">
            <zipfileset file="${target.jar}" prefix="${project.name-ver}"/>
            <zipfileset dir="${dist.doc.dir}" includes="**/*" prefix="${project.name-ver}/docs"/>
            <zipfileset dir="${javadoc.dir}" includes="**/*" prefix="${project.name-ver}/docs/api"/>
        </zip>
    </target>

    <property name="unzip.dir" location="${build.dir}/unzip"/>
    <property name="unzip.bin.dir" location="${unzip.dir}/bin"/>

    <target name="unzip-bin-zipfile" depends="create-bin-zipfile">
        <unzip src="${target.zip}" dest="${unzip.bin.dir}"/>
    </target>

    <target name="create-src-zipfile" depends="sign-jar">
        <zip destfile="${src.zip}" duplicate="preserve">
            <zipfileset file="${target.jar}" prefix="${project.name-ver}"/>
            <zipfileset dir="." includes="src/**,test/**,doc/**,*.xml" prefix="${project.name-ver}"/>
        </zip>
    </target>

    <target name="unzip-src-zipfile" depends="create-src-zipfile">
        <unzip src="${src.zip}" dest="${build.dir}/src"/>
    </target>

    <property name="executables" value="**/*.sh"/>

    <target name="create-bin-tar" depends="unzip-bin-zipfile">
        <tar destfile="${target.tar}" longfile="gnu">
            <tarfileset dir="${unzip.bin.dir}" excludes="${executables}"/>
            <tarfileset dir="${unzip.bin.dir}" includes="${executables}" filemode="755"/>
        </tar>
    </target>

    <target name="compress-tar" depends="create-bin-tar">
        <gzip src="${target.tar}" destfile="${target.tar.gz}"/>
        <bzip2 src="${target.tar}" destfile="${target.tar.bz2}"/>
    </target>

    <property name="untar.dir" location="${build.dir}/untar"/>
    <target name="untar-bin.tar.gz" depends="compress-tar">
        <mkdir dir="${untar.dir}"/>
        <gunzip src="${target.tar.gz}" dest="${untar.dir}"/>
        <untar src="${untar.dir}/${project.name-ver}.tar" dest="${untar.dir}"/>
    </target>

    <path id="run.classpath">
        <path refid="compile.classpath"/>
        <pathelement location="${target.jar}"/>
    </path>

    <target name="run" depends="sign-jar">
        <echo>running with classpath ${toString:run.classpath}</echo>
        <property environment="env"/>
        <java classname="d1.core.DiaryMain" classpathref="run.classpath">
            <!--<arg value="2019-09-17 22:00:00" />-->
            <!--<arg file="." />-->
            <!--<arg path="${user.home}:${env.ANT_HOME}" />-->
            <!--<arg pathref="run.classpath"/>-->
            <arg line="2019-09-17 . ${user.home};/"/>
        </java>
    </target>

    <target name="java-example-fork" depends="sign-jar">
        <property name="classpath-as-property" refid="run.classpath"/>
        <java classname="d1.core.DiaryMain"
              classpathref="run.classpath"
              fork="true">
            <arg value="2005-06-31-08:30"/>
            <arg file="."/>
            <arg path="${user.home};/"/>
        </java>
    </target>


</project>